amount_spent         = c(100, 125, 200),
impressions_obtained = c(1000, 1530, 105),
clicks_obtained      = c(250, 350, 600)
)
advertisement_data
f.obj <- c(1000/100, 1530/125, 105/200)
f.con <- matrix (c(1, 1, 1,
1, -1, 0,
0, 1, 1,
1, 0, 0,
0, 1, 0,
0, 0, 1), nrow=6, byrow=TRUE)
f.dir <- c("=", ">=", "<=", ">=", ">=", ">=")
f.rhs <- c(500, 0, 400, 25, 25, 25)
question1 = lp ("max", f.obj, f.con, f.dir, f.rhs)
print(question1$status)
optimum <- question1$solution
names(optimum) <- c("x_1", "x_2", "x_3")
print(optimum)
f.obj <- c(1000/100, 1530/125, 105/200)
f.con <- matrix (c(1, 1, 1,
1, -1, 0,
0, 1, 1,
1, 0, 0,
0, 1, 0,
0, 0, 1,
250/100, 350/125, 600/200), nrow=7, byrow=TRUE)
f.dir <- c("=", ">=", "<=", ">=", ">=", ">=", ">=")
f.rhs <- c(500, 0, 400, 25, 25, 25, 1350)
bonus1 = lp ("max", f.obj, f.con, f.dir, f.rhs)
print(bonus1$status)
optimum <- bonus1$solution
names(optimum) <- c("x_1", "x_2", "x_3")
print(optimum)
f.obj <- c(1000/100, 1530/125, 105/200)
f.con <- matrix (c(1, 1, 1,
1, -1, 0,
0, 1, 1,
1, 0, 0,
0, 1, 0,
0, 0, 1,
0, -0.3, 0.7,
250/100, 350/125, 600/200), nrow=8, byrow=TRUE)
f.dir <- c("=", ">=", "<=", ">=", ">=", ">=", ">=", ">=")
f.rhs <- c(500, 0, 400, 25, 25, 25, 0, 1350)
bonus2 = lp ("max", f.obj, f.con, f.dir, f.rhs)
print(bonus2$status)
cbind(f.con, f.dir, f.rhs)
cbind(Const, ineq, rhs)
cbind(f.con, f.dir, f.rhs)
cbind(Const, ineq, rhs)
f.obj <- c(1000/100, 1530/125, 105/200)
f.con <- matrix (c(1, 1, 1,
1, -1, 0,
0, 1, 1,
1, 0, 0,
0, 1, 0,
0, 0, 1,
0, -0.3, 0.7,
250/100, 350/125, 600/200), nrow=8, byrow=TRUE)
f.dir <- c("=", ">=", "<=", ">=", ">=", ">=", ">=", ">=")
f.rhs <- c(500, 0, 400, 25, 25, 25, 0, 1350)
bonus2 = lp ("max", f.obj, f.con, f.dir, f.rhs)
print(bonus2$status)
cbind(f.con, f.dir, f.rhs)
cbind(Const, ineq, rhs)
f.obj <- c(1000/100, 1530/125, 105/200)
f.con <- matrix (c(1, 1, 1,
1, -1, 0,
0, 1, 1,
1, 0, 0,
0, 1, 0,
0, 0, 1,
0, -0.3, 0.7,
250/100, 350/125, 600/200), nrow=8, byrow=TRUE)
f.dir <- c("=", ">=", "<=", ">=", ">=", ">=", ">=", ">=")
f.rhs <- c(500, 0, 400, 25, 25, 25, 0, 1350)
bonus2 = lp ("max", f.obj, f.con, f.dir, f.rhs)
print(bonus2$status)
cbind(f.con, f.dir, f.rhs)
f.obj <- c(1000/100, 1530/125, 105/200)
f.con <- matrix (c(1, 1, 1,
1, -1, 0,
0, 1, 1,
1, 0, 0,
0, 1, 0,
0, 0, 1,
0, -0.3, 0.7,
250/100, 350/125, 600/200), nrow=8, byrow=TRUE)
f.dir <- c("=", ">=", "<=", ">=", ">=", ">=", ">=", ">=")
f.rhs <- c(500, 0, 400, 25, 25, 25, 0, 1350)
bonus2 = lp ("max", f.obj, f.con, f.dir, f.rhs)
print(bonus2$status)
bonus2
bonus2$solution
f.obj <- c(1000/100, 1530/125, 105/200)
f.con <- matrix (c(1, 1, 1,
1, -1, 0,
0, 1, 1,
1, 0, 0,
0, 1, 0,
0, 0, 1,
0, -0.3, 0.7,
250/100, 350/125, 600/200), nrow=8, byrow=TRUE)
f.dir <- c("<=", ">=", "<=", ">=", ">=", ">=", ">=", ">=")
f.rhs <- c(500, 0, 400, 25, 25, 25, 0, 1350)
bonus2 = lp ("max", f.obj, f.con, f.dir, f.rhs)
print(bonus2$status)
bonus2$solution
f.obj <- c(1000/100, 1530/125, 105/200)
f.con <- matrix (c(1, 1, 1,
1, -1, 0,
0, 1, 1,
1, 0, 0,
0, 1, 0,
0, 0, 1,
0, -0.3, 0.7,
250/100, 350/125, 600/200), nrow=8, byrow=TRUE)
f.dir <- c("=", ">=", "<=", ">=", ">=", ">=", ">=", ">=")
f.rhs <- c(500, 0, 400, 25, 25, 25, 0, 1350)
bonus2 = lp ("max", f.obj, f.con, f.dir, f.rhs)
print(bonus2$status)
# Quantum Assessment Solutions
# Author: Sophia Mahmood
# Date: 8/14/2019
library(tibble)
library(ggplot2)
library(lpSolve)
# Variables
# s_n -- amount_spent
# i_n -- impressions_obtained
# c_n -- clicks_obtained
# ips_n -- impressions_per_dollar -- impressions_obtained/amount_spent
# cps_n -- clicks_per_dollar -- clicks_obtained/amount_spent
advertisement_data <- tibble(
advertisement_name   = paste0("Advertisement: ", 1:3),
amount_spent         = c(100, 125, 200),
impressions_obtained = c(1000, 1530, 105),
clicks_obtained      = c(250, 350, 600)
)
advertisement_data$impressions_per_dollar <- advertisement_data$impressions_obtained/advertisement_data$amount_spent
advertisement_data$clicks_per_dollar <- advertisement_data$clicks_obtained/advertisement_data$amount_spent
# Problem
# Maximize impressions
# y = sum(ips_j*x_j)
# Constraints
# Budget: $500
# sum(x_j) <= 500
# [1 1 1][x_n] <= [500]
# x_j >= 25 for all j
# [1 0 0] <= [25]
# [0 1 0] <= [25]
# [0 0 1] <= [25]
# x_1 - x_2 >= 0
# [1 -1 0] >= [0]
# x_2 + x_3 <= 400
# [0 1 1] <= [400]
# Clicks >= 1350
# --> sum(cps_j*x_j) >= 1350
# x_3 >= 0.3(x_2 + x_3)
# --> -0.3*x_2 + 0.7*x_3 >= 0
# Coefficients (Impressions per dollar spent)
Coeff <- advertisement_data$impressions_per_dollar
# Constraint matrix
Const <- matrix(c(1, 1, 1,
1, 0, 0,
0, 1, 0,
0, 0, 1,
1, -1, 0,
0, 1, 1,
2.5, 2.8, 3,
0, -0.3, 0.7), nrow = 8, byrow = TRUE)
# Inequality vector
ineq <- c("<=", ">=", ">=", ">=", ">=", "<=", ">=", ">=")
# RHS vector
rhs <- c(500, 25, 25, 25, 0, 400, 1350, 0)
optimum <- lp(direction = "max",
objective.in = Coeff,
const.mat = Const,
const.dir = ineq,
const.rhs = rhs,
all.int = TRUE)
# print(optimum$status)
#
Solution <- optimum$solution
names(Solution) <- c("x_1", "x_2", "x_3")
print(Solution)
#
print(paste("Total expected impressions: ", as.integer(optimum$objval), sep=""))
#
print(paste("Total expected clicks: ", as.integer(sum(advertisement_data$clicks_per_dollar*Solution)), sep=""))
optimum$solution
mtcars[sample(1:nrow, 3)]
?Amelia::missmap
mtcars[c(1, 2, 3), c(4, 5, 6)] = NA
Amelia::missmap(mtcars)
mtcars[c(1, 2, 3, 7), c(4, 5, 6, 9)] = NA
Amelia::missmap(mtcars)
library(representatives)
library(reticulate)
library(tidyverse)
library(dbplyr)
library(RPostgreSQL)
library(tictoc)
use_virtualenv('reps')
configure_aws()
if(!'reps' %in% keyfile_list()$key_name)
keyfile_create('reps', save_to_directory = TRUE)
library(representatives)
library(reticulate)
library(tidyverse)
library(dbplyr)
library(RPostgreSQL)
library(tictoc)
use_virtualenv('reps')
configure_aws()
keyfile_create('reps', save_to_directory = TRUE)
install_python(envname = "reps")
configure_aws()
use_virtualenv('reps')
configure_aws()
if (TRUE) {
if(!'reps' %in% keyfile_list()$key_name)
keyfile_create('reps', save_to_directory = TRUE)
if (!'reps' %in% security_group_list()$group_name) {
security_group_id <- security_group_create('reps')
} else {
security_group_id <- filter(security_group_list(), group_name == 'reps')$group_id
}
instance_id <- ec2_instance_create(
image_id = 'ami-05c1fa8df71875112',
instance_type='t2.large',
min = 1,
max = 1,
key_name = 'reps',
security_group_id = security_group_id,
instance_storage = 40,
user_data = ec2_instance_script()
)
# ec2_instance_stop(instance_id[[1]]$instance_id, terminate = TRUE)
Sys.sleep(3)
public_ip_address <-
ec2_get_info() %>%
filter(state == 'running') %>%
filter(launch_time >= Sys.time() - 500) %>%
pull(public_ip_address) %>%
str_replace_all("\\.", "-")
message(
paste0(
'ssh -i "reps.pem" ubuntu@ec2-',public_ip_address,'.us-east-2.compute.amazonaws.com'
)
)
}
virtualenv_remove('reps')
Y
install_python(envname = "reps")
use_virtualenv('reps')
configure_aws()
if (TRUE) {
if(!'reps' %in% keyfile_list()$key_name)
keyfile_create('reps', save_to_directory = TRUE)
if (!'reps' %in% security_group_list()$group_name) {
security_group_id <- security_group_create('reps')
} else {
security_group_id <- filter(security_group_list(), group_name == 'reps')$group_id
}
instance_id <- ec2_instance_create(
image_id = 'ami-05c1fa8df71875112',
instance_type='t2.large',
min = 1,
max = 1,
key_name = 'reps',
security_group_id = security_group_id,
instance_storage = 40,
user_data = ec2_instance_script()
)
# ec2_instance_stop(instance_id[[1]]$instance_id, terminate = TRUE)
Sys.sleep(3)
public_ip_address <-
ec2_get_info() %>%
filter(state == 'running') %>%
filter(launch_time >= Sys.time() - 500) %>%
pull(public_ip_address) %>%
str_replace_all("\\.", "-")
message(
paste0(
'ssh -i "reps.pem" ubuntu@ec2-',public_ip_address,'.us-east-2.compute.amazonaws.com'
)
)
}
configure_aws
configure_aws
config_data <- configr::read.config('config.yaml')$aws
access_key <-
paste("aws configure set aws_access_key_id", config_data$aws_access_key_id)
aws_secret_access_key <-
paste("aws configure set aws_secret_access_key", config_data$aws_secret_access_key)
default_region <-
paste("aws configure set default.region", config_data$default.region)
access_key
subprocess$call(access_key, shell=TRUE)
subprocess$call(aws_secret_access_key, shell=TRUE)
subprocess$call(default_region, shell=TRUE)
use_virtualenv('reps')
if (TRUE) {
if(!'reps' %in% keyfile_list()$key_name)
keyfile_create('reps', save_to_directory = TRUE)
if (!'reps' %in% security_group_list()$group_name) {
security_group_id <- security_group_create('reps')
} else {
security_group_id <- filter(security_group_list(), group_name == 'reps')$group_id
}
instance_id <- ec2_instance_create(
image_id = 'ami-05c1fa8df71875112',
instance_type='t2.large',
min = 1,
max = 1,
key_name = 'reps',
security_group_id = security_group_id,
instance_storage = 40,
user_data = ec2_instance_script()
)
# ec2_instance_stop(instance_id[[1]]$instance_id, terminate = TRUE)
Sys.sleep(3)
public_ip_address <-
ec2_get_info() %>%
filter(state == 'running') %>%
filter(launch_time >= Sys.time() - 500) %>%
pull(public_ip_address) %>%
str_replace_all("\\.", "-")
message(
paste0(
'ssh -i "reps.pem" ubuntu@ec2-',public_ip_address,'.us-east-2.compute.amazonaws.com'
)
)
}
library(representatives)
library(reticulate)
library(tidyverse)
library(dbplyr)
library(RPostgreSQL)
library(tictoc)
configure_aws()
use_virtualenv('reps')
if (TRUE) {
if(!'reps' %in% keyfile_list()$key_name)
keyfile_create('reps', save_to_directory = TRUE)
if (!'reps' %in% security_group_list()$group_name) {
security_group_id <- security_group_create('reps')
} else {
security_group_id <- filter(security_group_list(), group_name == 'reps')$group_id
}
instance_id <- ec2_instance_create(
image_id = 'ami-05c1fa8df71875112',
instance_type='t2.large',
min = 1,
max = 1,
key_name = 'reps',
security_group_id = security_group_id,
instance_storage = 40,
user_data = ec2_instance_script()
)
# ec2_instance_stop(instance_id[[1]]$instance_id, terminate = TRUE)
Sys.sleep(3)
public_ip_address <-
ec2_get_info() %>%
filter(state == 'running') %>%
filter(launch_time >= Sys.time() - 500) %>%
pull(public_ip_address) %>%
str_replace_all("\\.", "-")
message(
paste0(
'ssh -i "reps.pem" ubuntu@ec2-',public_ip_address,'.us-east-2.compute.amazonaws.com'
)
)
}
security_group_create('reps')
security_group_list()
keyfile_create('reps', save_to_directory = TRUE)
virtualenv_remove("reps")
y
install_python(envname = "reps")
use_virtualenv('reps')
configure_aws()
keyfile_create('reps', save_to_directory = TRUE)
configure_aws()
keyfile_create('reps', save_to_directory = TRUE)
library(representatives)
library(reticulate)
library(tidyverse)
library(dbplyr)
library(RPostgreSQL)
library(tictoc)
virtualenv_remove("reps")
y
install_python(envname = "reps")
use_virtualenv('reps')
configure_aws()
keyfile_create('reps', save_to_directory = TRUE)
if(!'reps' %in% keyfile_list()$key_name)
if (TRUE) {
if(!'reps' %in% keyfile_list()$key_name)
keyfile_create('reps', save_to_directory = TRUE)
if (!'reps' %in% security_group_list()$group_name) {
security_group_id <- security_group_create('reps')
} else {
security_group_id <- filter(security_group_list(), group_name == 'reps')$group_id
}
instance_id <- ec2_instance_create(
image_id = 'ami-05c1fa8df71875112',
instance_type='t2.large',
min = 1,
max = 1,
key_name = 'reps',
security_group_id = security_group_id,
instance_storage = 40,
user_data = ec2_instance_script()
)
# ec2_instance_stop(instance_id[[1]]$instance_id, terminate = TRUE)
Sys.sleep(3)
public_ip_address <-
ec2_get_info() %>%
filter(state == 'running') %>%
filter(launch_time >= Sys.time() - 500) %>%
pull(public_ip_address) %>%
str_replace_all("\\.", "-")
message(
paste0(
'ssh -i "reps.pem" ubuntu@ec2-',public_ip_address,'.us-east-2.compute.amazonaws.com'
)
)
}
public_ip_address <-
ec2_get_info() %>%
filter(state == 'running') %>%
filter(launch_time >= Sys.time() - 500) %>%
pull(public_ip_address) %>%
str_replace_all("\\.", "-")
message(
paste0(
'ssh -i "reps.pem" ubuntu@ec2-',public_ip_address,'.us-east-2.compute.amazonaws.com'
)
)
update_tweets
connection <- DBI::dbConnect(
PostgreSQL(),
dbname   = config_data$dbname,
host     = config_data$host,
port     = as.numeric(config_data$port),
user     = config_data$user,
password = config_data$password
)
config_data <- configr::read.config('config.yaml')$postgres
connection <- DBI::dbConnect(
PostgreSQL(),
dbname   = config_data$dbname,
host     = config_data$host,
port     = as.numeric(config_data$port),
user     = config_data$user,
password = config_data$password
)
if(TRUE) {
repeat({
try(update_tweets())
Sys.sleep(900)
})
}
library(representatives)
library(representatives)
library(reticulate)
library(tidyverse)
library(dbplyr)
library(RPostgreSQL)
library(tictoc)
if(TRUE) {
repeat({
try(update_tweets())
Sys.sleep(900)
})
}
?create_token
source('~/Documents/R/representatives/R/twitter_data.R', echo=TRUE)
library(representatives)
library(representatives)
library(representatives)
library(reticulate)
library(tidyverse)
library(dbplyr)
library(RPostgreSQL)
library(tictoc)
if(TRUE) {
repeat({
try(update_tweets())
Sys.sleep(900)
})
}
library(representatives)
library(representatives)
library(reticulate)
library(tidyverse)
library(dbplyr)
library(RPostgreSQL)
library(tictoc)
library(representatives)
debug(update_tweets)
if(TRUE) {
repeat({
try(update_tweets())
Sys.sleep(900)
})
}
grab_representatives
