)
tic()
dbRemoveTable(connection, 'tweets')
reps <- grab_representatives()
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 1)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
toc()
dbDisconnect(connection)
library(representatives)
check_twitter_oauth
?check_twitter_oauth
??check_twitter_oauth
reps <- grab_representatives()[1:3]
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 1)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
dbDisconnect(connection)
connection <- DBI::dbConnect(
RPostgreSQL::PostgreSQL(),
dbname   = 'postgres',
host     = '18.216.83.155',
port     = 5432,
user     = "postgres",
password = "password"
)
dbRemoveTable(connection, 'tweets')
reps <- grab_representatives()[1:3]
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 1)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 1)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 1)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 1)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
library("openssl")
library("httpuv")
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 1)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 1)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
debug(check_twitter_oauth)
twitteR::check_twitter_oauth
library(representatives)
library(reticulate)
library(tidyverse)
library(dbplyr)
library(RPostgreSQL)
library(tictoc)
if (FALSE) {
install_python(envname = "reps")
use_virtualenv('reps')
configure_aws()
}
if (FALSE) {
if(!'reps' %in% keyfile_list()$key_name)
keyfile_create('reps', save_to_directory = TRUE)
if (!'reps' %in% security_group_list()$group_name) {
security_group_id <- security_group_create('reps')
} else {
security_group_id <- filter(security_group_list(), group_name == 'reps')$group_id
}
instance_id <- ec2_instance_create(
image_id = 'ami-05c1fa8df71875112',
instance_type='t2.nano',
min = 1,
max = 1,
key_name = 'reps',
security_group_id = security_group_id,
instance_storage = 20,
user_data = ec2_instance_script()
)
# ec2_instance_stop(instance_id[[1]]$instance_id, terminate = TRUE)
public_ip_address <-
ec2_get_info() %>%
filter(state == 'running') %>%
filter(launch_time >= Sys.time() - 500) %>%
pull(public_ip_address) %>%
str_replace_all("\\.", "-")
message(
paste0(
'ssh -i "reps.pem" ubuntu@ec2-',public_ip_address,'.us-east-2.compute.amazonaws.com'
)
)
}
connection <- DBI::dbConnect(
RPostgreSQL::PostgreSQL(),
dbname   = 'postgres',
host     = '18.216.83.155',
port     = 5432,
user     = "postgres",
password = "password"
)
tic()
dbRemoveTable(connection, 'tweets')
reps <- grab_representatives()[1:3]
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 1)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
toc()
dbDisconnect(connection)
Sys.sleep()
Sys.sleep(5)
Sys.sleep(10)
length(grab_representatives())
573*20
573*20/60
573*20/60/60
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 30)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
library(representatives)
grab_representatives()
twitter_handles <- grab_representatives()
usethis::use_data(twitter_handles)
library(representatives)
twitter_handles
connection <- DBI::dbConnect(
RPostgreSQL::PostgreSQL(),
dbname   = 'postgres',
host     = '18.216.83.155',
port     = 5432,
user     = "postgres",
password = "password"
)
tic()
dbRemoveTable(connection, 'tweets')
reps <- grab_representatives()
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 30)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
toc()
dbDisconnect(connection)
library(representatives)
library(representatives)
library(reticulate)
library(tidyverse)
library(dbplyr)
library(RPostgreSQL)
library(tictoc)
connection <- DBI::dbConnect(
RPostgreSQL::PostgreSQL(),
dbname   = 'postgres',
host     = '18.216.83.155',
port     = 5432,
user     = "postgres",
password = "password"
)
tic()
dbRemoveTable(connection, 'tweets')
reps <- grab_representatives()
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 30)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
toc()
dbDisconnect(connection)
dbExecute('select distinct handle, update_time
from tweets
where update_time >= current_timestamp - interval \'7 hour\'
')
dbExecute(
connection,
sql(
'select distinct handle, update_time
from tweets
where update_time >= current_timestamp - interval \'7 hour\'
'
)
)
connection <- DBI::dbConnect(
RPostgreSQL::PostgreSQL(),
dbname   = 'postgres',
host     = '18.216.83.155',
port     = 5432,
user     = "postgres",
password = "password"
)
dbExecute(
connection,
sql(
'select distinct handle, update_time
from tweets
where update_time >= current_timestamp - interval \'7 hour\'
'
)
)
sql(
'select distinct handle, update_time
from tweets
where update_time >= current_timestamp - interval \'7 hour\'
'
)
dbGetQuery(
connection,
sql(
'select distinct handle, update_time
from tweets
where update_time >= current_timestamp - interval \'7 hour\'
'
)
)
reps
response <- dbGetQuery(
connection,
sql(
'select distinct handle, update_time
from tweets
where update_time >= current_timestamp - interval \'7 hour\'
'
)
)
response
response$handle
response$handle %in% reps
reps %in% response$handle
reps[!reps %in% response$handle]
reps[reps %in% response$handle]
reps <- reps[!reps %in% response$handle]
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 30)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
dbDisconnect(connection)
connection <- DBI::dbConnect(
RPostgreSQL::PostgreSQL(),
dbname   = 'postgres',
host     = '18.216.83.155',
port     = 5432,
user     = "postgres",
password = "password"
)
tic()
# dbRemoveTable(connection, 'tweets')
reps <- grab_representatives()
if(dbExistsTable(connection, 'tweets')) {
response <- dbGetQuery(
connection,
sql(
'select distinct handle, update_time
from tweets
where update_time >= current_timestamp - interval \'10 hour\'
'
)
)
reps <- reps[!reps %in% response$handle]
}
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 1)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
toc()
dbDisconnect(connection)
connection <- DBI::dbConnect(
RPostgreSQL::PostgreSQL(),
dbname   = 'postgres',
host     = '18.216.83.155',
port     = 5432,
user     = "postgres",
password = "password"
)
tic()
# dbRemoveTable(connection, 'tweets')
reps <- grab_representatives()
if(dbExistsTable(connection, 'tweets')) {
response <- dbGetQuery(
connection,
sql(
'select distinct handle, update_time
from tweets
where update_time >= current_timestamp - interval \'10 hour\'
'
)
)
reps <- reps[!reps %in% response$handle]
}
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 1)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
toc()
dbDisconnect(connection)
connection <- DBI::dbConnect(
RPostgreSQL::PostgreSQL(),
dbname   = 'postgres',
host     = '18.216.83.155',
port     = 5432,
user     = "postgres",
password = "password"
)
tic()
# dbRemoveTable(connection, 'tweets')
reps <- grab_representatives()
if(dbExistsTable(connection, 'tweets')) {
response <- dbGetQuery(
connection,
sql(
'select distinct handle, update_time
from tweets
where update_time >= current_timestamp - interval \'10 hour\'
'
)
)
reps <- reps[!reps %in% response$handle]
}
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 1)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
toc()
dbDisconnect(connection)
reps
update_table <- function() {
tic()
connection <- DBI::dbConnect(
RPostgreSQL::PostgreSQL(),
dbname   = 'postgres',
host     = '18.216.83.155',
port     = 5432,
user     = "postgres",
password = "password"
)
on.exit({
dbDisconnect(connection)
})
# dbRemoveTable(connection, 'tweets')
reps <- grab_representatives()
if(dbExistsTable(connection, 'tweets')) {
response <- dbGetQuery(
connection,
sql(
'select distinct handle, update_time
from tweets
where update_time >= current_timestamp - interval \'10 hour\'
'
)
)
reps <- reps[!reps %in% response$handle]
}
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 1)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
toc()
}
update_tweets <- function() {
tic()
connection <- DBI::dbConnect(
RPostgreSQL::PostgreSQL(),
dbname   = 'postgres',
host     = '18.216.83.155',
port     = 5432,
user     = "postgres",
password = "password"
)
on.exit({
dbDisconnect(connection)
})
# dbRemoveTable(connection, 'tweets')
reps <- grab_representatives()
if(dbExistsTable(connection, 'tweets')) {
response <- dbGetQuery(
connection,
sql(
'select distinct handle, update_time
from tweets
where update_time >= current_timestamp - interval \'10 hour\'
'
)
)
reps <- reps[!reps %in% response$handle]
}
map(
reps,
function(x) {
df <- representatives::grab_timeline(handles = x, n = 500, sleep = 1)
dbWriteTable(conn = connection,
name = 'tweets',
value =  df,
append = TRUE)
}
)
toc()
}
update_tweets()
update_tweets()
update_tweets()
update_tweets()
update_tweets()
update_tweets()
source('~/Documents/R/representatives/test_script.R', echo=TRUE)
update_tweets()
